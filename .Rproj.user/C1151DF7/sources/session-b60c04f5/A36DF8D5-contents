---
title: "BE CODE mixte"
date: "`r Sys.Date()`"
output: html_document
---

# Implémentation des fonctions et outils nécessaires : 

```{r}
## Importation cohorte :  ----

cohort_one_one <- read.table("both_years_one_x_one.txt", header = TRUE, skip = 1)
# Passer toutes les variables en numérique :
cohort_one_one <- as.data.frame(lapply(cohort_one_one, as.numeric))

### Extraction Fonction ----

extraction_cohort <- function(YEAR = 1811, PLOT = FALSE, cohort) {
  new_cohort <- cohort[cohort$Year == YEAR,]
  rownames(new_cohort) <- 0:110
  S_x <- 1 - new_cohort$qx
  if(PLOT){
    pv <- log(10000*new_cohort$qx)
    tv <- seq(0, 110, by = 1)
    plot(tv, pv, xlab = "age", ylab = "ln(10000*qx)", type = "l", xlim = c(5, 110), ylim = c(2, 9))
    title(paste("Evolution des probabilités de décés en ",YEAR))
  }
  return(list(S_x = S_x, new_cohort = new_cohort))
}

cohort_1811 <- extraction_cohort(1811, TRUE, cohort = cohort_one_one)[[2]]
cohort_1861 <- extraction_cohort(1861, TRUE, cohort = cohort_one_one)[[2]]
cohort_1911 <- extraction_cohort(1911, TRUE, cohort = cohort_one_one)[[2]]

# saveRDS(cohort_1811, "RDS/cohort_1811.rds")
# saveRDS(cohort_1861, "RDS/cohort_1861.rds")
# saveRDS(cohort_1911, "RDS/cohort_1911.rds")

```


## Matrice des probabilités de décès : 

### Probabilité de décès : 

```{r}

prob_deces <- function(n, i1, i2, q, a, b, p, q_1, q_2, q_3, q_4, k = 4) {
  q_x <- rep(0, n)
  
  q_x[1] <-  q_1  # valeur particulières pour les ages 0 et 1
  q_x[2] <-  q_2  # valeur particulières pour les ages 1 à 2
  q_x[3] <-  q_3  # valeur particulières pour les ages 2 à 3
  q_x[4] <-  q_4  # valeur particulières pour les ages 3 à 4
  
  for(i in (k+1):n) {
    if(i > k & i <= i1 ){ 
      q_x[i] = b + q * (i ^ (p))
    }
    else if (i1 < i & i <= i2) {
      q_x[i] = a + b + q *(i ^ (p)) # valeur habituelle
    }
    else if (i > i2) {
      q_x[i] = a + q * (i ^ (p))
    }
  }
  return(q_x)
}

j_1811 <- prob_deces(
  n = 200, 
  i1 = 42,
  i2 = 99,
  b = 3.1504 * (10 ^ -3),
  a = 1.9888 * (10 ^ -3),
  q = 9.3157 * (10 ^ -9),
  p = 3, 
  q_1 = 0.6051, 
  q_2 = 0.0726, 
  q_3 = 0.0503, 
  q_4 = 0.0285, 
  k = 4
)

j_1861 <- prob_deces(
  n = 200,
  b = 4.4825 * (10 ^ -3),
  a = 1.9033 * (10 ^ -3),
  i1 = 42,
  i2 = 89,
  q = 2.6351 * (10 ^ -13),
  p = 5,
  q_1 = 0.3086,
  q_2 = 0.0291,
  q_3 = 0.0627,
  q_4 = 0.0276, 
  k = 4
)

j_1911 <- prob_deces(
  n = 200,
  i1 = 33,
  i2 = 70,
  q = 1.8872 * (10 ^ -15),
  a = 2.8939 * (10 ^ -3),
  b = 9.0987 * (10 ^ -4),
  p = 6,
  q_1 = 0.1671,
  q_2 = 0.0097,
  q_3 = 0.0003,
  q_4 = 0.0149, 
  k = 4
)

```

### Matrice des probabilités de décès : 

```{r}
# k : durée de pré-modélisation, valeurs particulières de lambda et q pour les ages 0 à k
# k € [2,4]

mat_prob_deces <-
  function(lambda1,
           lambda2,
           lambda3,
           lambda4,
           lambda,
           n,
           q_x, 
           k = 4) {
    M_A = matrix(0, ncol = 200, nrow = 200) # matrice par bloc
    v_lambda = c(lambda1, lambda2, lambda3, lambda4, rep(lambda, n - 4))
    # vecteur des lambda
    
    if (k == 2){ 
      v_lambda[c(3,4)] <- v_lambda[5] 
      # adaptation selon la durée de pré-modélisation 
    }
    else if (k == 3){ 
      v_lambda[4] <- v_lambda[5]
      # adaptation selon la durée de pré-modélisation 
    }
    for (i in 1:n - 1) {
      # formule générale pour le modèle 
      M_A[i, i + 1] = v_lambda[i]
      M_A[i, i] = -(v_lambda[i] + q_x[i])
    }
    M_A[n, n] = -1
    return(M_A)
  }

# Matrice des probabilités de décès pour les trois modèles ne prenant pas en compte que les individus de 200 ans meurent :

M_1811 <- mat_prob_deces(
  n = 200,
  lambda = 2.5657,
  lambda1 = 2.4906,
  lambda2 = 0.6376,
  lambda3 = 0.7040,
  lambda4 = 0.4416,
  q_x = j_1811, 
  k = 4
)

M_1861 <- mat_prob_deces(
  n = 200,
  lambda = 2.4794,
  lambda1 = 1.6773,
  lambda2 = 0.7793,
  lambda3 = 0.7954,
  lambda4 = 0.7531,
  q_x = j_1861, 
  k = 4
)

M_1911 <-
  mat_prob_deces(
    lambda1 = 1.7958,
    lambda2 = 0.5543,
    lambda3 = 3.5061,
    lambda4 = 0.6535,
    lambda = 2.3707,
    n = 200,
    q_x = j_1911, 
    k = 4
  )

# Sauvegarder les matrices dans le projet R :
   # saveRDS(M_1811, "RDS/M_1811.rds")
   # saveRDS(M_1861, "RDS/M_1861.rds")
   # saveRDS(M_1911, "RDS/M_1911.rds")
  
```

### Fonction de survie d'un individus :  

```{r}
library(Matrix)

S <- function(age, matrice, n = 200) {
  alpha = rep(0, n)
  alpha[1] = 1
  e = rep(1, n)
  return (t(alpha) %*% expm(matrice * age) %*% e)
}

Sx <- function(age, matrice, n = 200) {
  alpha = rep(0, n)
  alpha[age] = 1
  e = rep(1, n)
  if (age == 0){
    return(1)
  }
  else {
  return (t(alpha) %*% expm(matrice * age) %*% e)
  }
}

```
`
### Espérance de vie dans le modèle : 

```{r}
# Espérance de vie selon le modèle : 

esp = function(matrice, n = 200) {
  e = rep(1, n)
  alpha = rep(0, n)
  alpha[1] = 1
  return (-t(alpha) %*% solve(matrice) %*% e)
}

# Exportations: 
# Création du data frame avec les valeurs d'espérance de vie
df <- data.frame(
  "Année" = c("1811", "1861", "1911"),
  "Espérance de vie" = c(esp(M_1811), esp(M_1861), esp(M_1911)),
  "Espérance de vie_cohort" = c(cohort_1811$ex[1], cohort_1861$ex[1], cohort_1911$ex[1])
)

# Affichage du data frame
print(t(df))
df

# Exportation en latex : 
# library(stargazer)
# stargazer(cbind(esp(M_1811), esp(M_1861), esp(M_1911)), type = "latex")

```


### Vecteur de Probabilités de décès par âge réel :  (code long)

```{r}
proba_deces <- function(n, M) {
  a=rep(0,n)
  for(i in 1:n-1){
    S_i <- S(i-1,M)
    S_i_1 <- S(i,M)
    a[i]= 1 - (S_i_1/S_i)
  }
  a[n] = 1 
  return(a)
}

P_1811 <- proba_deces(which(cohort_1811$qx == 1), M_1811)
P_1861 <- proba_deces(which(cohort_1861$qx == 1), M_1861)
P_1911 <- proba_deces(which(cohort_1911$qx == 1), M_1911)

# Sauvegarder les probas de décès dans le projet R :

 # saveRDS(P_1811, "RDS/P_1811.rds")
 # saveRDS(P_1861, "RDS/P_1861.rds")
 # saveRDS(P_1911, "RDS/P_1911.rds")
 
```

### Représentations graphiques des probabilité de décès selon les âges pour les 3 modèles :

```{r}
borne_sup = which(cohort_1811$qx == 1) 

plot(
  seq(1, borne_sup, by = 1),
  log(10000*P_1811[1:borne_sup]),
  xlab = "age",
  ylab = "ln(10000*qx)",
  type = "l",
  xlim = c(0, borne_sup),
  ylim = c(2, 9)
)
lines(seq(1, borne_sup
, by = 1), log(10000*cohort_1811$qx[1:borne_sup]), col = "orange")
title(" Evolution des probabilités de décés en 1811")
legend("bottomright", 
       legend = c("1811", "Cohorte "),
       col = c("black", "orange"), 
       lty = c(1, 1, 1))


borne_sup = which(cohort_1861$qx == 1) + 1

plot(
  seq(1, borne_sup, by = 1),
  log(10000*P_1861[1:borne_sup]),
  xlab = "age",
  ylab = "ln(10000*qx)",
  type = "l",
  xlim = c(0, borne_sup),
  ylim = c(2, 9)
)
lines(seq(1, borne_sup, by = 1), log(10000*cohort_1861$qx[1:borne_sup]), col = "orange")
title(" Evolution des probabilités de décés en 1861")
legend('bottomright', 
       legend = c("1861", "Cohorte"),
       col = c("black", "orange"), 
       lty = c(1, 1, 1))

borne_sup = which(cohort_1911$qx == 1) + 1

plot(
  seq(1, borne_sup, by = 1),
  log(10000*P_1911[1:borne_sup]),
  xlab = "age",
  ylab = "ln(10000*qx)",
  type = "l",
  xlim = c(1, borne_sup),
  ylim = c(2, 9)
)
lines(seq(1, borne_sup, by = 1), log(10000*cohort_1911$qx[1:borne_sup]), col = "orange")
title(" Evolution des probabilités de décés en 1911")
legend("bottomright", 
       legend = c("1911", "Cohorte"),
       col = c("black", "orange"), 
       lty = c(1, 1, 1))

```

### Fonction de mortalité : 

```{r}
mort = function(matrice, age) {
  alpha = rep(0, 200)
  alpha[1] = 1
  e = rep(1, 200)
  q = -matrice %*% e
  return (t(alpha) %*% expm(matrice * age) %*% q / (t(alpha) %*% expm(matrice *
                                                                        age) %*% e))
}

# Exemples :
mort(M_1911, age = 0)
mort(M_1861, age = 0)
mort(M_1811, age = 0)
```

# Simulation individus : 

### Simulation de la population : 

```{r}
set.seed(123)

# Première étape on simule 200 loi exponentielle pour chaque âge physiologique de chaque individu

f_evol_age_bio <- function(v_lambda, n, table) {
  v_q1 <- rexp(n = n, rate = 1 / v_lambda[1])
  v_q2 <- rexp(n = n, rate = 1 / v_lambda[2])
  v_q3 <- rexp(n = n, rate = 1 / v_lambda[3])
  v_q4 <- rexp(n = n, rate = 1 / v_lambda[4])

  # Récupération de l'âge maximal de la cohorte
  w = 200
  
  # Création de la matrice de population
  mat_population <- matrix(0, ncol = w, nrow = n)
  colnames(mat_population) <- c(0:(w - 1))
  
  # On somme les durées passées d'un âge à l'autre
  mat_population[, 1] <- v_q1
  mat_population[, 2] <- v_q2
  mat_population[, 3] <- v_q3
  mat_population[, 4] <- v_q4
  
  for (i in 5:w) {
    mat_population[, i] <- rexp(n = n, rate = 1 / v_lambda[5])
  }
  return(mat_population)
}

# Vecteur de lambda pour les trois modèles : 

v_lambda_1811 <- c(lambda1 = 2.4906, lambda2 = 0.6376, lambda3 = 0.7040, lambda4 = 0.4416, lambda = 2.5657)
v_lambda_1861 <- c(lambda1 = 1.6773, lambda2 = 0.7793, lambda3 = 0.7954, lambda4 = 0.7531, lambda = 2.4794)
v_lambda_1911 <- c(lambda1 = 1.7958, lambda2 = 0.5543, lambda3 = 3.5061, lambda4 = 0.6535, lambda = 2.3707)

# Population totale de 1 000 000 d'individus
n = 1000000

m_evol_age_bio_1811 <- f_evol_age_bio(v_lambda_1811, n, cohort_1811)
m_evol_age_bio_1861 <- f_evol_age_bio(v_lambda_1861, n, cohort_1861)
m_evol_age_bio_1911 <- f_evol_age_bio(v_lambda_1911, n, cohort_1911)

# saveRDS(m_evol_age_bio_1811, "RDS/m_evol_age_bio_1811.rds")
# saveRDS(m_evol_age_bio_1861, "RDS/m_evol_age_bio_1861.rds")
# saveRDS(m_evol_age_bio_1911, "RDS/m_evol_age_bio_1911.rds")

```


### On applique les probas de décès pour chaque individu : 

```{r}
# On simule et affiche le nombre de personnes encore en vie à chaque âge en fonction des probabilités de décès estimées. 

effectif_age = function(q, mat_pop, table) {
  n = which(table$qx == 1)
  table = matrix(0, nrow = n+1, ncol = 2)
  table[1, 2] = nrow(mat_pop) 
  for (i in 2:n) {
    table[i, 2] = round(table[i - 1, 2] * (1 - q[i - 1]))
  }
  table[,1] = 0:n
  colnames(table) <- c("age", "effectif")
  return(table)
}

effectif_mat_1811 <-
  effectif_age(P_1811, mat_pop = m_evol_age_bio_1811, table = cohort_1811)

effectif_mat_1861 <-
  effectif_age(P_1861, mat_pop = m_evol_age_bio_1861, table = cohort_1861)

effectif_mat_1911 <-
  effectif_age(P_1911, mat_pop = m_evol_age_bio_1911, table = cohort_1911)

# saveRDS(effectif_mat_1811, "RDS/effectif_mat_1811.rds")
# saveRDS(effectif_mat_1861, "RDS/effectif_mat_1861.rds")
# saveRDS(effectif_mat_1911, "RDS/effectif_mat_1911.rds")

```

### Evolution : 

```{r}

# On somme les durées passées d'un âge à l'autre pour obtenir l'âge biologique de chaque individu 
# L'âge biologique étant une succession de 200 états on "normalise" par un produit en croix pour faire correspondre l'âge biologique à l'âge réel. 

f_somme_durée <- function(mat_pop, effectif_mat) {
  w_max = nrow(effectif_mat)-1
  normalisation_durée = w_max / 200 
  # ou 200 est l'âge maximale biologique
  nb_age = ncol(mat_pop)
  nb_indiv = nrow(mat_pop)
  for (i in 2:nb_age){
    mat_pop[,i] = mat_pop[,i] + mat_pop[,i-1]
  }
  mat_pop = mat_pop * normalisation_durée
  return(mat_pop)
}

mat_somme_durée_1811 <- f_somme_durée(m_evol_age_bio_1811,effectif_mat_1811)
mat_somme_durée_1861 <- f_somme_durée(m_evol_age_bio_1861,effectif_mat_1861)
mat_somme_durée_1911 <- f_somme_durée(m_evol_age_bio_1911,effectif_mat_1911)

# saveRDS(mat_somme_durée_1811, "RDS/mat_somme_durée_1811.rds")
# saveRDS(mat_somme_durée_1861, "RDS/mat_somme_durée_1861.rds")
# saveRDS(mat_somme_durée_1911, "RDS/mat_somme_durée_1911.rds")

```

### On récupére l'âge biologique de toutes les personnes : 

```{r}
# On récupère l'âge biologique de chaque individu en fonction de l'âge réel et de la durée passée à chaque âge.

tableau_age_bio_réel <- function(effectif, mat_somme_durée) {
  nb_age = nrow(effectif) 
  nb_ind = nrow(mat_somme_durée) 
  age_bio_reel <- matrix(-1, ncol = 2, nrow = nb_ind)
  colnames(age_bio_reel) <- c("age_reel","age_bio")
  mat_somme_durée <- floor(mat_somme_durée)
  age_bio_reel
  for (j in 2:nb_age){ 
    age_bio_reel[effectif[j,2]:effectif[(j-1),2],1] <- j-1
    for(i in effectif[j,2]:effectif[(j-1),2]){
    v <- which(mat_somme_durée[i,] >= effectif[j,1])
    if (length(v) == 0){ 
        age_bio_reel[i,2] <- 0
    }
    else{
      age_bio_reel[i,2] <- max(v[1]-2,0)
      }
    }
  }
  return(age_bio_reel)
}

# effectif_mat_1811 <- readRDS("RDS/effectif_mat_1811.rds")
# mat_somme_durée_1811 <- readRDS("RDS/mat_somme_durée_1811.rds")
# rm(effectif_mat_1811,mat_somme_durée_1811)
# 
# effectif_mat_1861 <- readRDS("RDS/effectif_mat_1861.rds")
# mat_somme_durée_1861 <- readRDS("RDS/mat_somme_durée_1861.rds")
# rm(effectif_mat_1861,mat_somme_durée_1861)
# 
# effectif_mat_1911 <- readRDS("RDS/effectif_mat_1911.rds")
# mat_somme_durée_1911 <- readRDS("RDS/mat_somme_durée_1911.rds")
# rm( effectif_mat_1911, mat_somme_durée_1911)

age_bio_reel_1811 <- tableau_age_bio_réel(effectif_mat_1811, mat_somme_durée_1811)
age_bio_reel_1861 <- tableau_age_bio_réel(effectif_mat_1861, mat_somme_durée_1861)
age_bio_reel_1911 <- tableau_age_bio_réel(effectif_mat_1911, mat_somme_durée_1911)

max(age_bio_reel_1811[,2])
max(age_bio_reel_1861[,2])
max(age_bio_reel_1911[,2])

# saveRDS(age_bio_reel_1811, "RDS/age_bio_reel_1811.rds")
# saveRDS(age_bio_reel_1861, "RDS/age_bio_reel_1861.rds")
# saveRDS(age_bio_reel_1911, "RDS/age_bio_reel_1911.rds")

```

# Rognage de la population : 

Dans cette partie on part de la matrice dont on a simulé les âges physiologique. 
On a sommé les durée de transition d'un âge à l'autre et on a normalisé la durée 
avec l'âge réel. Ces transformations sont le fruits des matrices mat_somme_durée_<année>

Ainsi on connait la durée réel correspondant à chaque âge biologique. 
Maintenant on veut l'âge biologique de chaque individu à chaque âge réel. 

Pour ça on regarde la durée écoulée d'un âge physiologique à l'autre et la correspondance réelle. Ainsi créer une matrice qui à une dimension nb_invidus * age_max réel 
Et pour chaque âge réel d'un individu on écrit sont âge physiologique correspondant. 

Pour un individu i, si la case [i,5] = 6 alors on sait que l'individu à un âge biologique de 6 ans à l'âge réel de 6 ans (5+1 ans avec les indices du tableau)
De plus si la valeur 6 se répété de 5 à 7 alors on prend la moyenne des âges physiologiques pour obtenir l'âge biologique. 

```{r}
 age_bio_reel_1811 <- readRDS("RDS/age_bio_reel_1811.rds")
 effectif_mat_1811 <- readRDS("RDS/effectif_mat_1811.rds")
 mat_somme_durée_1811 <- readRDS("RDS/mat_somme_durée_1811.rds")
 rm(effectif_mat_1811,age_bio_reel_1811,mat_somme_durée_1811,mat_rognée_1811)

 mat_somme_durée_1861 <- readRDS("RDS/mat_somme_durée_1861.rds")
 age_bio_reel_1861 <- readRDS("RDS/age_bio_reel_1861.rds")
 effectif_mat_1861 <- readRDS("RDS/effectif_mat_1861.rds")
 rm(effectif_mat_1861,age_bio_reel_1861,mat_somme_durée_1861, mat_rognée_1861)
 
 mat_somme_durée_1911 <- readRDS("RDS/mat_somme_durée_1911.rds")
 age_bio_reel_1911 <- readRDS("RDS/age_bio_reel_1911.rds")
 effectif_mat_1911 <- readRDS("RDS/effectif_mat_1911.rds")
 rm(effectif_mat_1911,age_bio_reel_1911,mat_somme_durée_1911,mat_rognée_1911)

f_rognage_data <- function(effectif_mat,mat_somme_durée,age_bio_reel) {
    age_max <- nrow(effectif_mat)
    nb_indiv <- nrow(mat_somme_durée)
    mat_rognée <- matrix(-1, ncol = age_max, nrow = nb_indiv)
    mat_rognée[, 1] <- 0
    for (i in 1:nb_indiv) {
      for (j in 2:(age_bio_reel[i, 1] + 1)) {
        v <- floor(mat_somme_durée[i, 1:(age_bio_reel[i, 2] + 2)])
        v_age_reel <- (1:(age_bio_reel[i, 1] + 1)) - 1
        
        if (sum(which(v > v_age_reel[j - 1] &
                      v <= v_age_reel[j])) == 0) {
          mat_rognée[i, j] <-  which(v == min(v[v > v_age_reel[j - 1]]))[1] - 1
  # On récupère la durée la plus proche de l'âge réel pour obtenir l'âge biologique
        }
        else{
          mat_rognée[i, j] <-
            mean(which(v > v_age_reel[j - 1] & v <= v_age_reel[j])) - 1
    # On fait la moyenne des durées pour obtenir l'âge biologique dans le cas où il y a plusieurs durées correspondantes 
        }
      }
    }
    colnames(mat_rognée) <- paste(c(0:(age_max - 1)), " ans")
    return(mat_rognée)
  }

mat_rognée_1811 <- f_rognage_data(effectif_mat_1811, mat_somme_durée_1811, age_bio_reel_1811)
mat_rognée_1861 <- f_rognage_data(effectif_mat_1861, mat_somme_durée_1861, age_bio_reel_1861)
mat_rognée_1911 <- f_rognage_data(effectif_mat_1911, mat_somme_durée_1911, age_bio_reel_1911)

# Sauvegarde des matrices rognées :
# saveRDS(mat_rognée_1811, "RDS/mat_rognée_1811.rds")
# saveRDS(mat_rognée_1861, "RDS/mat_rognée_1861.rds")
# saveRDS(mat_rognée_1911, "RDS/mat_rognée_1911.rds")

```


# Commandes d'importation des objets : 

Les objets sont lourds il est préférable de les importée par année puis de les supprimer pour appliquer les commandes à une autre année 

```{r}
# lecture des objets créés 
# cohort_1811 <- readRDS("RDS/cohort_1811.rds")
# cohort_1861 <- readRDS("RDS/cohort_1861.rds")
# cohort_1911 <- readRDS("RDS/cohort_1911.rds")
# 
# M_1811 <- readRDS("RDS/M_1811.rds")
# M_1861 <- readRDS("RDS/M_1861.rds")
# M_1911 <- readRDS("RDS/M_1911.rds")
# 
# P_1811 <-  readRDS("RDS/P_1811.rds")
# P_1861 <-  readRDS("RDS/P_1861.rds")
# P_1911 <-  readRDS("RDS/P_1911.rds")
# 
# m_evol_age_bio_1811 <- readRDS("RDS/m_evol_age_bio_1811.rds")
# m_evol_age_bio_1861 <- readRDS("RDS/m_evol_age_bio_1861.rds")
# m_evol_age_bio_1911 <- readRDS("RDS/m_evol_age_bio_1911.rds")
# 
# effectif_mat_1811 <- readRDS("RDS/effectif_mat_1811.rds")
# effectif_mat_1861 <- readRDS("RDS/effectif_mat_1861.rds")
# effectif_mat_1911 <- readRDS("RDS/effectif_mat_1911.rds")
# 
# mat_somme_durée_1811 <- readRDS("RDS/mat_somme_durée_1811.rds")
# mat_somme_durée_1861 <- readRDS("RDS/mat_somme_durée_1861.rds")
# mat_somme_durée_1911 <- readRDS("RDS/mat_somme_durée_1911.rds")
# 
# age_bio_reel_1811 <- readRDS("RDS/age_bio_reel_1811.rds")
# age_bio_reel_1861 <- readRDS("RDS/age_bio_reel_1861.rds")
# age_bio_reel_1911 <- readRDS("RDS/age_bio_reel_1911.rds")
# 
# mat_rognée_1811 <- readRDS("RDS/mat_rognée_1811.rds")
# mat_rognée_1861 <- readRDS("RDS/mat_rognée_1861.rds")
# mat_rognée_1911 <- readRDS("RDS/mat_rognée_1911.rds")

```


